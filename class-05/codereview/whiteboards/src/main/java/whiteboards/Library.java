/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package whiteboards;

import java.util.Arrays;

public class Library {
    public int fibonacci(int n) {
        if (n < 2) {
            return n;
        } else {
            return fibonacci(0, 1, n-2);
        }
    }

    // a for loop is iteration
    // this is recursion: calling a method inside the definition of that method
    private int fibonacci(int nMinus2, int nMinus1, int nToGo) {
        int nthFib = nMinus2 + nMinus1;
        if(nToGo == 0) {
            return nthFib;
        } else {
            return fibonacci(nMinus1, nthFib, nToGo - 1);
        }
    }

    public int fibonacci_iterative(int n) {
        if (n < 2) {
            return n;
        }
        int nMinus2 = 0;
        int nMinus1 = 1;
        for (int i = 2; i <= n; i++) {
            int current = nMinus1 + nMinus2;
            nMinus2 = nMinus1;
            nMinus1 = current;
        }
        return nMinus1;
    }

    // I would call "n" the entire size of the input 2d array
    // 1 1 1
    // 1 1 1
    // 1 1
    // 1 1 1 1 1 1 1 1 1 1 1
    // O(n) runtime
    // Or, if we call the number of rows n, and the number of columns m,
    // O(n * m) runtime

    public Integer[] rowSums(int[][] matrix) {
        return (Integer[]) (Arrays.stream(matrix).map(nums -> {
            int sum = 0;
            for (int num : nums) {
                sum += num;
            }
            return sum;
        }).toArray());
    }
}
